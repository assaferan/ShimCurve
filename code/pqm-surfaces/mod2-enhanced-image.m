

intrinsic Mod2GaloisMapPQM(X::CrvHyp : prec:=30) -> Any 
  {Given X/F such that Jac(X) is a PQM surface (O maximal for now), the 2-torsion 
  A[2] is free of rank 1 as an O/2-module. Let Q be an O/2-basis element. 
  Then we can write Q^sigma = a_sigma * Q for any sigma \in GalF. We return the map 
            GalF --> (O/2)^x,   sigma |--> a_sigma   
  where it factors through adjoining the 2-torsion field 
  and the endomorphism field to F.}

  CC:=ComplexField(prec);
  assert BaseRing(X) eq Rationals();
  assert IsSimplifiedModel(X);
  B1,B2,B3:=HeuristicEndomorphismAlgebra( X : CC:=true);
  assert IsQuaternionAlgebra(B2);

  f:=HyperellipticPolynomials(X);
  XR:=RiemannSurface(f,2 : Precision:=prec);
  assert XR`BasePoint eq XR![0,0];

	QA2:=SplittingField(f);
	L:=HeuristicEndomorphismFieldOfDefinition(X);
	M:=OptimizedRepresentation(Compositum(QA2,L));
	ooplaces:=InfinitePlaces(M);
	embC:=ooplaces[1];

  //These are the roots a_i of the hyperelliptic polynomial
  // [(a_2,0)] - [(a_1,0)] will be an O/2O-basis element of A[2](C)
  //after apply the Abel-Jacobi map. assert a1 is rational.
  frootsM:=[ a[1] : a in Roots(ChangeRing(f,M))];
  assert IsCoercible(Rationals(),frootsM[1]);
  frootsC:=[ Evaluate(a,embC) : a in frootsM ];
  assert frootsM[1] eq 0;
  

  endos:=HeuristicEndomorphismRepresentation( X : CC:=true);
  endosM2:=[ ChangeRing(m[1],CC) : m in endos ];
  endosM4:=[ ChangeRing(m[2],Rationals()) : m in endos ]; 
  Bmat:=MatrixAlgebra< Rationals(), 4 | endosM4 >;
  tr, B, maptoB := IsQuaternionAlgebra(Bmat);
  Obasis:=[ maptoB(b) : b in endosM4 ];
  O:=QuaternionOrder(Obasis);
  assert IsMaximal(O);

	BPM:=ChangeRing(BigPeriodMatrix(XR),CC);
	P1:=ColumnSubmatrix(BPM,1,2);
	Latendo:=RealLatticeOfPeriodMatrix(ChangeRing(PeriodMatrix(X),CC));

  //Q is the O/2O basis element[(a_2,0)] - [(0,0)] after applying Abel-Jacobi 
  Q:=1/2*P1*AbelJacobi(XR![frootsC[2],0]);
  //1/2*P1 because this is the change of basis required from the small period matrix lattice to Latendo

  Omod2:=quo(O,2);
  a,b,c,d:=Explode(endosM2);
  Omod2_eltsCC:=[ (w*a + x*b + y*c + z*d) : w,x,y,z in [0,1] ];
  Omod2_elts:=[ Omod2!(O!(w*Obasis[1] + x*Obasis[2] + y*Obasis[3] + z*Obasis[4])) : w,x,y,z in [0,1] ];
  twotorsion_points:=[ a*Q : a in Omod2_eltsCC ];
  //this is O_Q: the O-cyclic module generated by Q. 
  twotorsion_points_real:= [ RealVector(v) : v in twotorsion_points ];
  //check that they are all 2-torsion points, only the identity is already 2-torsion
  //and that O_Q is all of the two torsion
  assert forall(e){ x : x in twotorsion_points_real | IsCoercible(Latendo,Eltseq(2*x)) };
  assert #{ x : x in twotorsion_points_real | IsCoercible(Latendo,Eltseq(x)) } eq 1;
  assert not(exists(t){ [T1,T2] : T1,T2 in twotorsion_points_real | IsCoercible(Latendo,T1-T2) and (T1 ne T2) });

  Gal,auts,map:=AutomorphismGroup(M);

  enhancedmap:=map< Gal -> Omod2_elts | sigma :-> 
  Omod2_elts[[ i : i in [1..#twotorsion_points] | IsCoercible(Latendo,Eltseq(RealVector(twotorsion_points[i] - 1/2*(P1)*AbelJacobi(XR![Evaluate(map(sigma)(frootsM[2]),embC),0])))) ][1]] >;

  return Gal,map,enhancedmap;
 end intrinsic;




 
 //R<x> := PolynomialRing(Rationals()); C := HyperellipticCurve(R![-1, 5, -8, 4, -1, 1], R![]);
 //X:=C;
 intrinsic EndomorphismRepresentationPQM(X::CrvHyp : prec:=30) -> Any 
  {}

  CC:=ComplexField(prec);
  assert BaseRing(X) eq Rationals();
  assert IsSimplifiedModel(X);
  B1,B2,B3:=HeuristicEndomorphismAlgebra( X : CC:=true);
  assert IsQuaternionAlgebra(B2);


  endos:=HeuristicEndomorphismRepresentation( X : CC:=true);
  endosM2:=[ ChangeRing(m[1],CC) : m in endos ];
  endosM4:=[ ChangeRing(m[2],Rationals()) : m in endos ]; 
  Bmat:=MatrixAlgebra< Rationals(), 4 | endosM4 >;
  tr, B, maptoB := IsQuaternionAlgebra(Bmat);
  Obasis:=[ maptoB(b) : b in endosM4 ];
  O:=QuaternionOrder(Obasis);
  assert IsMaximal(O);
  //O:=MaximalOrder(QuaternionAlgebra(Discriminant(Oquat)));

  tr,mu:=HasPolarizedElementOfDegree(O,1);
  L:=HeuristicEndomorphismFieldOfDefinition(X);
  Gal,auts,map:=AutomorphismGroup(L);
  //assert GroupName(Gal) eq "C2^2";


  AutFull:=Aut(O,mu);
  Autmuimage:=[AutFull(c) : c in Domain(AutFull) ];
  Autmu_alg:= [ SquarefreeFactorization(Rationals()!((g^2)`element)) : g in Autmuimage ];
  Exclude(~Autmu_alg,1);
  Autmu_alg:=[1] cat Autmu_alg;

  fixedfields:=[];
  endo_discs:=[];
  Galelts:=Setseq(Set(Gal));
  for sigma in Galelts do 
    Ksigma:=FixedField(L,[map(sigma)]);
    if Degree(Ksigma) eq 2 then
      Kprec:=BaseNumberFieldExtra(DefiningPolynomial(Ksigma),prec);

      XK:=ChangeRing(X,Kprec);
      A1,A2,A3:=HeuristicEndomorphismAlgebra(XK);
      tr,E:=IsNumberField(A2);
      assert tr;
      assert Degree(E) le 2;
      Append(~fixedfields,Ksigma);
      Append(~endo_discs, SquarefreeFactorization(Discriminant(E)));
    end if;
  end for;

  fixedfields:=[L] cat fixedfields;
  endo_discs:=[1] cat endo_discs; //1 in endo discs corresponds to having QM over L, i.e. it is the trivial Galois element.

  //The map from the Galois group of L to the discriminant of the endomorphism field defined over the corresponding fixed field.
  auttoendo:=map< Gal -> endo_discs | sigma :-> endo_discs[([ i : i in [1..#fixedfields] | IsIsomorphic(fixedfields[i],FixedField(L,[map(sigma)])) ][1])] >; 
  //the map from the discriminant of the endomorphism field to Aut(mu,O).
  endotoautmuO := map< endo_discs -> Autmuimage | d :-> Autmuimage[Index(Autmu_alg,d)] >;

  endomorphism_rep:= auttoendo*endotoautmuO;

  return Gal, map, endomorphism_rep;

end intrinsic;



intrinsic EnhancedRepresentationMod2PQM(X::CrvHyp : prec:=30) -> Any 
  {return 1. the Galois group of the compositum of the two torsion field and the endomorphism field
          2. A map from the Galois group in S_n to automorphisms of the field
          3. the enhanced representation as a map from automorphisms of the field to elements of the enhanced semidirect product.}

  
  Galgrp2,Galmap2,mod2map:=Mod2GaloisMapPQM(X : prec:=prec);
  Galgrp_end,Galmap_end,rho_end:=EndomorphismRepresentationPQM(X : prec:=prec);


  M:=Domain(Galmap2(Galgrp2.1));
  L:=Domain(Galmap_end(Galgrp_end.1));

  assert IsSubfield(L,M);
  Galrel:=AutomorphismGroup(RelativeField(L,M));
  Galrelquo,quomap:=quo< Galgrp2 | Galrel >;
  assert Galrelquo eq Galgrp_end;


  restrict_gal:= map< Galgrp2 -> Galgrp_end | sigma :-> quomap(sigma) >;
  restrict_rho_end:=restrict_gal*rho_end;

  Bmod2:=QuaternionAlgebra(Universe(Codomain(mod2map))`quaternionorder);
  Bend:=Universe(Codomain(rho_end))`quaternionalgebra;
  _,Bmap:=IsIsomorphic(Bend,Bmod2 : Isomorphism:=true);
  Bmod2modQx:=QuaternionAlgebraModuloScalars(Bmod2);

  B1,B2,B3:=HeuristicEndomorphismAlgebra( X : CC:=true);
  tr,B:=IsQuaternionAlgebra(B2);
  //O:=MaximalOrder(QuaternionAlgebra(Discriminant(B)));
  O:=Universe(Codomain(mod2map))`quaternionorder;
  Oenh:=EnhancedSemidirectProduct(O : N:=2);

  rho_enhanced:=map< Galgrp2 -> Oenh | sigma :-> < Bmod2modQx!(Bmap(restrict_rho_end(sigma)`element)), mod2map(sigma)>  >;

  return Galgrp2, Galmap2, rho_enhanced;
end intrinsic;
  

//fx:=-x^5+4*x^4-10*x^3+8*x^2-2*x;
//X:=HyperellipticCurve(fx);
   



